services:
  postgresql:
    image: postgres:15.5
    container_name: postgresql
    restart: always
    environment:
      POSTGRES_PASSWORD: "${PROJECT_PASSWORD}"
    volumes:
      - ./database_setup_sql_scripts:/docker-entrypoint-initdb.d
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - data-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres", "-d", "${POSTGRES_DATABASE_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 120s

  mongodb:
    image: mongo:6.0
    container_name: mongodb
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: "${PROJECT_USER}"
      MONGO_INITDB_ROOT_PASSWORD: "${PROJECT_PASSWORD}"
      MONGO_INITDB_DATABASE: "${MONGO_DATABASE_NAME}"
    volumes:
      - mongodb_data:/data/db
    ports:
      - "27017:27017"
    networks:
      - data-network
    healthcheck:
      test: ["CMD", "mongosh", "--host", "localhost", "--username", "${PROJECT_USER}", "--password", "${PROJECT_PASSWORD}", "--authenticationDatabase", "admin", "--eval", "db.runCommand('ping').ok", "--quiet"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 120s

  minio:
    image: minio/minio:RELEASE.2025-04-22T22-12-26Z
    container_name: minio
    restart: always
    environment:
      MINIO_ROOT_USER: "${PROJECT_USER}"
      MINIO_ROOT_PASSWORD: "${PROJECT_PASSWORD}"
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - data-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 15s

  kafka:
    image: bitnami/kafka:3.7
    container_name: kafka
    restart: always
    environment:
      # KRaft settings
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      # Listener settings
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      # General settings
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    ports:
      - "9092:9092"
      - "9093:9093"
    volumes:
      - kafka_data:/bitnami/kafka
    networks:
      - data-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --list --bootstrap-server localhost:9092 || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 30s

  python:
    build:
      context: ../platform_setup
      dockerfile: ../platform_setup/dockerfiles/python.dockerfile
    container_name: python
    restart: always
    depends_on:
      postgresql:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy
      minio:
        condition: service_healthy
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DATABASE_NAME: ${POSTGRES_DATABASE_NAME}
      DB_USER: ${PROJECT_USER}
      DB_PASSWORD: ${PROJECT_PASSWORD}
      MONGO_HOST: ${MONGO_HOST}
      MONGO_PORT: ${MONGO_PORT}
      MONGO_USER: ${PROJECT_USER}
      MONGO_PASSWORD: ${PROJECT_PASSWORD}
      MONGO_DB: ${MONGO_DATABASE_NAME}
      MINIO_HOST: ${MINIO_HOST}
      MINIO_PORT: ${MINIO_PORT}
      MINIO_USER: ${PROJECT_USER}
      MINIO_PASSWORD: ${PROJECT_PASSWORD}
      MINIO_CLIENT_GAMMA_STORAGE_BUCKET: ${MINIO_CLIENT_GAMMA_STORAGE_BUCKET}
      MINIO_CLICKSTREAM_TELEMETRY_BUCKET: ${MINIO_CLICKSTREAM_TELEMETRY_BUCKET}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
      KAFKA_CLICKSTREAM_USER_BEHAVIOUR_TOPIC: ${KAFKA_CLICKSTREAM_USER_BEHAVIOUR_TOPIC}
      KAFKA_TELEMETRY_VEHICLE_STATS_TOPIC: ${KAFKA_TELEMETRY_VEHICLE_STATS_TOPIC}
      KAFKA_ANALYTICS_SESSION_DURATION_TOPIC: ${KAFKA_ANALYTICS_SESSION_DURATION_TOPIC}
    volumes:
      - python_logs:/app/logs
      - ../support_insights/data_generators:/app/scripts/support_insights
      - ../clickstream-telemetry/data_generators:/app/scripts/clickstream-telemetry
      - ./python_scripts_orchestrator:/app/scripts/python_scripts_orchestrator
    ports:
      - "1212:1212"
    command: >
      python /app/scripts/python_scripts_orchestrator/data_generator_orchestrator.py
    healthcheck:
      test: ["CMD", "pgrep", "-f", "data_generator_orchestrator.py"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 30s
    networks:
      - data-network

volumes:
  postgres_data:
  mongodb_data:
  minio_data:
  kafka_data:
  python_logs:

networks:
  data-network:
    driver: bridge
