services:
  postgresql:
    image: postgres:15.5
    container_name: postgresql
    restart: always
    environment:
      POSTGRES_PASSWORD: "${PROJECT_PASSWORD}"
    volumes:
      - ./database_setup_sql_scripts:/docker-entrypoint-initdb.d
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    networks:
      - data-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres", "-d", "${POSTGRES_DATABASE_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 30s
    mem_limit: 1.2g

  mongodb:
    image: mongo:6.0
    container_name: mongodb
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: "${PROJECT_USER}"
      MONGO_INITDB_ROOT_PASSWORD: "${PROJECT_PASSWORD}"
      MONGO_INITDB_DATABASE: "${MONGO_DATABASE_NAME}"
    volumes:
      - mongodb_data:/data/db
    ports:
      - "${MONGO_PORT}:${MONGO_PORT}"
    networks:
      - data-network
    healthcheck:
      test: ["CMD", "mongosh", "--host", "localhost", "--username", "${PROJECT_USER}", "--password", "${PROJECT_PASSWORD}", "--authenticationDatabase", "admin", "--eval", "db.runCommand('ping').ok", "--quiet"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 120s
    mem_limit: 1g

  minio:
    image: minio/minio:RELEASE.2025-04-22T22-12-26Z
    container_name: minio
    restart: always
    environment:
      MINIO_ROOT_USER: "${PROJECT_USER}"
      MINIO_ROOT_PASSWORD: "${PROJECT_PASSWORD}"
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    ports:
      - "${MINIO_PORT}:${MINIO_PORT}"
      - "9001:9001"
    networks:
      - data-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${MINIO_PORT}/minio/health/live"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 15s
    mem_limit: 512m

  kafka:
    image: bitnami/kafka:3.7
    container_name: kafka
    restart: always
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    ports:
      - "9092:9092"
      - "9093:9093"
    volumes:
      - kafka_data:/bitnami/kafka
    networks:
      - data-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --list --bootstrap-server localhost:9092 || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 30s
    mem_limit: 1.5g

  orchestration_ui:
    build:
      context: ../platform_setup
      dockerfile: ../platform_setup/dockerfiles/orchestration_ui.dockerfile
    container_name: orchestration_ui
    restart: always
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy
      minio:
        condition: service_healthy
    environment:
      MONGO_HOST: "${MONGO_HOST}"
      MONGO_PORT: "${MONGO_PORT}"
      MONGO_USER: "${PROJECT_USER}"
      MONGO_PASSWORD: "${PROJECT_PASSWORD}"
      MONGO_DB: "${MONGO_DATABASE_NAME}"
      MINIO_HOST: "${MINIO_HOST}"
      MINIO_PORT: "${MINIO_PORT}"
      MINIO_USER: "${PROJECT_USER}"
      MINIO_PASSWORD: "${PROJECT_PASSWORD}"
      MINIO_CLIENT_GAMMA_STORAGE_BUCKET: "${MINIO_CLIENT_GAMMA_STORAGE_BUCKET}"
      MINIO_CLICKSTREAM_TELEMETRY_BUCKET: "${MINIO_CLICKSTREAM_TELEMETRY_BUCKET}"
      KAFKA_BOOTSTRAP_SERVERS: "${KAFKA_BOOTSTRAP_SERVERS}"
      KAFKA_CLICKSTREAM_USER_BEHAVIOUR_TOPIC: "${KAFKA_CLICKSTREAM_USER_BEHAVIOUR_TOPIC}"
      KAFKA_TELEMETRY_VEHICLE_STATS_TOPIC: "${KAFKA_TELEMETRY_VEHICLE_STATS_TOPIC}"
      KAFKA_ANALYTICS_SESSION_DURATION_TOPIC: "${KAFKA_ANALYTICS_SESSION_DURATION_TOPIC}"
      KAFKA_CLIENT_BETA_STORAGE_TOPIC: "${KAFKA_CLIENT_BETA_STORAGE_TOPIC}"
      CHUNK_SIZE: 10000
      SQLITE_DB_FILE: "/app/storage/orchestrator.db"
    volumes:
      - orchestration_ui_data:/app
      - ../support_insights/data_generators:/app/scripts/support_insights
      - ../support_insights/data_generator_tests:/app/tests/support_insights_tests
      - ../clickstream_telemetry/data_generators:/app/scripts/clickstream_telemetry
      - ../clickstream_telemetry/data_generator_tests:/app/tests/clickstream_telemetry
      - ./python_scripts_orchestrator:/app/scripts/python_scripts_orchestrator
      - ./entrypoint_scripts/orchestration_ui_startup.sh:/app/orchestration_ui_startup.sh
      - ./entrypoint_scripts/sqlite3_db_setup.sql:/app/sqlite3_db_setup.sql
    ports:
      - "1212:1212"
    command: bash /app/orchestration_ui_startup.sh
    healthcheck:
      test: ["CMD", "curl", "-f", "localhost:1212"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 30s
    networks:
      - data-network
    mem_limit: 1g

  spark:
    build:
      context: ../platform_setup
      dockerfile: ../platform_setup/dockerfiles/spark.dockerfile
    container_name: spark
    environment:
      SPARK_MODE: master
      SPARK_WORKER_INSTANCES: 1
      SPARK_WORKER_MEMORY: 1G
      PYSPARK_PYTHON: /opt/bitnami/python/bin/python3
      PYSPARK_DRIVER_PYTHON: /opt/bitnami/python/bin/python3
      SPARK_RPC_AUTHENTICATION_ENABLED: "false"
      SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED: "false"
      SPARK_SSL_ENABLED: "false"
    ports:
      - "7077:7077"
      - "1234:8080"
      - "4040-4050:4040-4050"
    volumes:
      - ./jars/postgresql-jdbc.jar:/opt/bitnami/spark/jars/postgresql-jdbc.jar:ro
    networks:
      - data-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 30s
    mem_limit: 2g
    command: /opt/bitnami/spark/sbin/start-master.sh

  airflow:
    build:
      context: ../platform_setup
      dockerfile: ../platform_setup/dockerfiles/airflow.dockerfile
    container_name: airflow
    restart: always
    depends_on:
      postgresql:
        condition: service_healthy
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__LOAD_EXAMPLES: "False"
      AIRFLOW_LOAD_EXAMPLES: "no"
      PYTHONPATH: /opt/airflow
      AIRFLOW__LOGGING__BASE_LOG_FOLDER: /opt/airflow/logs
      AIRFLOW__LOGGING__LOGGING_LEVEL: INFO
      AIRFLOW__API__AUTH_BACKENDS: airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session
      AIRFLOW_WEBSERVER_SECRET_KEY: "${AIRFLOW_WEBSERVER_SECRET_KEY}"
      AIRFLOW_APISERVER_SECRET_KEY: "${AIRFLOW_APISERVER_SECRET_KEY}"
      AIRFLOW_FERNET_KEY: "${AIRFLOW_FERNET_KEY}"
      AIRFLOW_USERNAME: "${PROJECT_USER}"
      AIRFLOW_PASSWORD: "${PROJECT_PASSWORD}"
      AIRFLOW_FIRSTNAME: "${FIRST_NAME}"
      AIRFLOW_LASTNAME: "${LAST_NAME}"
      AIRFLOW_EMAIL: "${EMAIL_ADDRESS}"
      AIRFLOW_DATABASE_NAME: "${AIRFLOW_METADATA_DATABASE}"
      AIRFLOW_DATABASE_USERNAME: "${POSTGRES_DEFAULT_USER}"
      AIRFLOW_DATABASE_PASSWORD: "${PROJECT_PASSWORD}"
      AIRFLOW_DATABASE_HOST: "${POSTGRES_HOST}"
      AIRFLOW_DATABASE_PORT_NUMBER: "${POSTGRES_PORT}"
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_DEFAULT_USER}:${PROJECT_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${AIRFLOW_METADATA_DATABASE}
      AIRFLOW__DATABASE__CONN_MAX_AGE: 30
    volumes:
      - ../support_insights/data_loaders:/opt/airflow/dags/support_insights
      - ../clickstream_telemetry/data_loaders:/opt/airflow/dags/clickstream_telemetry
      - airflow_logs:/opt/airflow/logs
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 60s
    networks:
      - data-network
    mem_limit: 1.5g

  trino:
    image: trinodb/trino:475
    container_name: trino
    restart: always
    ports:
      - "8082:8080"
    depends_on:
      postgresql:
        condition: service_healthy
      minio:
        condition: service_healthy
    environment:
      POSTGRES_HOST: "${POSTGRES_HOST}"
      POSTGRES_PORT: "${POSTGRES_PORT}"
      POSTGRES_DEFAULT_USER: "${POSTGRES_DEFAULT_USER}"
      POSTGRES_PASSWORD: "${PROJECT_PASSWORD}"
      HIVE_METASTORE_DATABASE: "${HIVE_METASTORE_DATABASE}"
      MINIO_HOST: "${MINIO_HOST}"
      MINIO_PORT: "${MINIO_PORT}"
      PROJECT_USER: "${PROJECT_USER}"
      PROJECT_PASSWORD: "${PROJECT_PASSWORD}"
      ICEBERG_FILE_FORMAT: "${ICEBERG_FILE_FORMAT}"
      S3_PATH_STYLE_ACCESS: "${S3_PATH_STYLE_ACCESS}"
      TRINO_HTTP_PORT: "8082"
      TRINO_ENVIRONMENT: "${TRINO_ENVIRONMENT}"
      TRINO_DATA_DIR: "${TRINO_DATA_DIR}"
    volumes:
    - ./trino/etc:/etc/trino:ro
    - ./trino/etc:/usr/lib/trino/etc/:ro
    - ./jars/postgresql-jdbc.jar:/usr/lib/trino/plugin/iceberg/postgresql-jdbc.jar:ro
    - ./entrypoint_scripts/trino_startup.sh:/trino_startup.sh:ro
    command: >
      /bin/bash /trino_startup.sh
    networks:
      - data-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/info"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 60s
    mem_limit: 1.2g

  superset:
    build:
      context: ../platform_setup
      dockerfile: dockerfiles/superset.dockerfile
    container_name: superset
    restart: always
    ports:
      - "8088:8088"
    environment:
      - SUPERSET_PORT=8088
      - SUPERSET_SECRET_KEY=${PROJECT_PASSWORD}
      - SUPERSET_DATABASE_DIALECT=postgresql+psycopg2
      - SUPERSET_DATABASE_USER=postgres
      - SUPERSET_DATABASE_PASSWORD=${PROJECT_PASSWORD}
      - SUPERSET_DATABASE_HOST=${POSTGRES_HOST}
      - SUPERSET_DATABASE_PORT_NUMBER=${POSTGRES_PORT}
      - SUPERSET_DATABASE_NAME=${SUPERSET_METADATA_DATABASE}
      - SUPERSET_CONFIG_PATH=/opt/bitnami/superset/superset_config.py
      - FIRST_NAME=${FIRST_NAME}
      - LAST_NAME=${LAST_NAME}
      - EMAIL_ADDRESS=${EMAIL_ADDRESS}
      - PROJECT_USER=${PROJECT_USER}
      - PROJECT_PASSWORD=${PROJECT_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - SUPERSET_METADATA_DATABASE=${SUPERSET_METADATA_DATABASE}
    depends_on:
      postgresql:
        condition: service_healthy
    volumes:
      - ../clickstream_telemetry/data_dashboards:/app/bitnami/superset_home/clickstream_telemetry/dashboards
      - ../support_insights/data_dashboards:/app/bitnami/superset_home/support_insights/dashboards
      - ./entrypoint_scripts/superset_startup.sh:/app/superset_startup.sh
    networks:
      - data-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    mem_limit: 1g

  dbt:
    build:
      context: ../platform_setup
      dockerfile: ../platform_setup/dockerfiles/dbt.dockerfile
    container_name: dbt
    restart: always
    depends_on:
      trino:
        condition: service_healthy
      minio:
        condition: service_healthy
    environment:
      TRINO_HOST: "${TRINO_HOST}"
      ICEBERG_FILE_FORMAT: "${ICEBERG_FILE_FORMAT}"
      MINIO_HOST: "${MINIO_HOST}"
      MINIO_PORT: "${MINIO_PORT}"
      MINIO_ICEBERG_CATALOG_BUCKET: "${MINIO_ICEBERG_CATALOG_BUCKET}"
      S3_PATH_STYLE_ACCESS: "${S3_PATH_STYLE_ACCESS}"
      AIRFLOW_FERNET_KEY: "${AIRFLOW_FERNET_KEY}"
      AIRFLOW_METADATA_DATABASE: "${AIRFLOW_METADATA_DATABASE}"
    volumes:
      - ../platform_setup/dbt_project/dbt_project.yml:/app/dbt_project.yml
      - ../clickstream_telemetry/data_loaders/dbt_models:/app/dbt_project/models
    networks:
      - data-network
    healthcheck:
      test: ["CMD", "dbt", "debug"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    mem_limit: 512m
    command: ["bash", "-c", "dbt debug && tail -f /dev/null"]
volumes:
  postgres_data:
  mongodb_data:
  minio_data:
  kafka_data:
  orchestration_ui_data:
  airflow_logs:

networks:
  data-network:
    driver: bridge